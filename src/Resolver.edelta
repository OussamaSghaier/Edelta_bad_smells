import edelta.badsmells.finder.lib.BadSmellsFinder
import edelta.refactorings.lib.Refactorings
import java.util.function.Predicate
import org.eclipse.emf.ecore.EClassifier
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.util.EcoreUtil

package edelta.resolver.lib

use Refactorings as refactorings
use BadSmellsFinder as finder

def checkRefactoringsCatalog(EPackage ePackage){
	resolveDuplicatedFeatures(ePackage);
	// to ask for confirmation:
	
	/*resolveDeadClassifiers(ePackage, [
		cl |
		println("Should I remove dead classifier "
			+ getEObjectRepr(cl)
			+ "? (y/n)")
		return new java.util.Scanner(System.^in).nextLine.equalsIgnoreCase("y")
	]);*/
	
	// remove without confirmation
	resolveDeadClassifiers(ePackage, [true]);
	resolveRedundantContainers(ePackage);
	resolveClassificationByHierarchy(ePackage);
	resolveConcreteAbstractMetaclass(ePackage);

	//resolveAbstractConcreteMetaclass(ePackage);
}

/**
 * Extracts superclasses in the presence of duplicate features
 * considering all the classes of the given package.
 * 
 * @param ePackage
 */
def resolveDuplicatedFeatures(EPackage ePackage) {
	finder.findDuplicateFeatures(ePackage)
		.values
		.forEach[refactorings.extractSuperclass(it)]
}

def resolveDeadClassifiers(EPackage ePackage, Predicate<EClassifier> shouldRemove) {
	val deadClassifiers = finder.findDeadClassifiers(ePackage)
	deadClassifiers.forEach[
		cl |
		if (shouldRemove.test(cl))
			EcoreUtil.remove(cl)
	]
}

def resolveRedundantContainers(EPackage ePackage) {
	refactorings.redundantContainerToEOpposite(
		finder.findRedundantContainers(ePackage)
	)
}

def resolveClassificationByHierarchy(EPackage ePackage) {
	refactorings.classificationByHierarchyToEnum(
		finder.findClassificationByHierarchy(ePackage)
	)
}

def resolveConcreteAbstractMetaclass(EPackage ePackage) {
	refactorings.concreteBaseMetaclassToAbstract(
		finder.findConcreteAbstractMetaclasses(ePackage)
	)
}

def resolveAbstractConcreteMetaclass(EPackage ePackage) {
	refactorings.abstractBaseMetaclassToConcrete(
		finder.findAbstractConcreteMetaclasses(ePackage)
	)
}

