import java.util.List
import java.util.Map
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.xbase.lib.Pair

package edelta.refactorings.lib

/**
 * Given a non empty list of {@link EStructuralFeature}, which are known to
 * appear in several classes as duplicates, extracts a new common superclass,
 * with the duplicate feature,
 * adds the extracted superclass to the classes with the duplicate
 * feature and removes the duplicate feature from each class.
 * 
 * @param duplicates
 */
def extractSuperclass(List<? extends EStructuralFeature> duplicates){
	val feature = duplicates.head;
	val containingEPackage = feature.EContainingClass.EPackage
	val superClassName =
		ensureEClassifierNameIsUnique(containingEPackage,
			feature.name.toFirstUpper + "Element"
		)

	val superclass = newEClass(superClassName) [
		abstract = true;
		EStructuralFeatures += EcoreUtil.copy(feature)
	]
	containingEPackage.EClassifiers += superclass

	for (duplicate : duplicates) {
		val eContainingClass = duplicate.EContainingClass
		// set supertype of the EClass of the attribute
		eContainingClass.ESuperTypes += superclass;
		// and then remove the attribute from the original EClass
		eContainingClass.EStructuralFeatures -= duplicate
	}
}

/**
 * Ensures that the proposed classifier name is unique within the specified
 * package; if not, it appends an incremental index until the name
 * is actually unique
 */
def ensureEClassifierNameIsUnique(EPackage ePackage, String proposedName) {
	var className = proposedName
	val currentEClassifiersNames =
		ePackage.EClassifiers.map[name].sort
	var counter = 1
	// make sure the new class is unique by name in the package
	while (currentEClassifiersNames.contains(className)) {
		className += (counter++)
	}
	return className
}

/**
 * Fix all the passed redundant containers (in the shape of pairs)
 * by setting the eOpposite property.
 * 
 * That is, given the pair r1 -> r2, then r2 is set as the opposite
 * reference of r1 and viceversa.
 */
def redundantContainerToEOpposite(Iterable<Pair<EReference, EReference>> redundantContainers) {
	for (redundant : redundantContainers) {
		redundant.key.EOpposite = redundant.value
		redundant.value.EOpposite = redundant.key
	}
}

def classificationByHierarchyToEnum(Map<EClass, List<EClass>> classificationsByHierarchy) {
	classificationsByHierarchy
		.forEach[superClass, subClasses|
			val ePackage = superClass.EPackage
			val enumName = ensureEClassifierNameIsUnique
				(ePackage, superClass.name + "Type")
			val enum = newEEnum(enumName) [
				subClasses.forEach[
					subClass, index |
					val enumLiteralName = ensureEClassifierNameIsUnique
						(ePackage, subClass.name.toUpperCase)
					ELiterals += newEEnumLiteral(enumLiteralName) => [
						value = index+1
					]
				]
			]
			ePackage.EClassifiers += enum
			superClass.EStructuralFeatures +=
				newEAttribute(superClass.name.toLowerCase + "Type", enum)
			EcoreUtil.removeAll(subClasses)
		]
}

def concreteBaseMetaclassToAbstract(Iterable<EClass> concreteAbstractMetaclasses) {
	concreteAbstractMetaclasses.forEach[abstract = true]
}

def abstractBaseMetaclassToConcrete(Iterable<EClass> abstractConcreteMetaclasses) {
	abstractConcreteMetaclasses.forEach[abstract = false]
}
